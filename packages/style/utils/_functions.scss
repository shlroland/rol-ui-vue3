@function mergeColorMaps($rol-colors, $custom-colors) {
  $merged-colors: $rol-colors;

  @if (type-of($custom-colors) == 'map') {
    @each $name, $components in $custom-colors {
      @if (
        type-of($name) ==
          'string' and
          (
            type-of($components) == 'list' or type-of($components) == 'color'
          ) and
          length($components) >=
          1
      ) {
        $color-base: null;
        $color-invert: null;
        $color-light: null;
        $color-dark: null;
        $value: null;

        @if type-of($components) == 'color' {
          $color-base: $components;
          $color-invert: findColorInvert($color-base);
          $color-light: findLightColor($color-base);
          $color-dark: findDarkColor($color-base);
        } @else if type-of($components) == 'list' {
          $color-base: nth($components, 1);

          @if length($components) > 3 {
            $color-invert: nth($components, 2);
            $color-light: nth($components, 3);
            $color-dark: nth($components, 4);
          } @else if length($components) > 2 {
            $color-invert: nth($components, 2);
            $color-light: nth($components, 3);
            $color-dark: findDarkColor($color-base);
          } @else {
            $color-invert: nth($components, 2);
            $color-light: findLightColor($color-base);
            $color-dark: findDarkColor($color-base);
          }
        }

        $value: ($color-base, $color-invert, $color-light, $color-dark);

        @if type-of($color-base) == 'color' {
          $merged-colors: map_merge(
            $merged-colors,
            (
              $name: $value,
            )
          );
        }
      }
    }
  }

  @return $merged-colors;
}

@function powerNumber($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function colorLuminance($color) {
  @if type-of($color) != 'color' {
    @return 0.55;
  }
  $color-rgb: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color),
  );
  @each $name, $value in $color-rgb {
    $adjusted: 0;
    $value: $value / 255;
    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + 0.055) / 1.055;
      $value: powerNumber($value, 2);
    }
    $color-rgb: map-merge(
      $color-rgb,
      (
        $name: $value,
      )
    );
  }

  @return (map-get($color-rgb, 'red') * 0.2126) +
    (map-get($color-rgb, 'green') * 0.7152) +
    (map-get($color-rgb, 'blue') * 0.0722);
}

@function findColorInvert($color) {
  @if (colorLuminance($color) > 0.55) {
    @return rgba(#000, 0.7);
  } @else {
    @return #fff;
  }
}

@function Rgba($color, $alpha) {
  @if type-of($color) != 'color' {
    @return $color;
  }
  @return rgba($color, $alpha);
}

@function findLightColor($color) {
  @if type-of($color) == 'color' {
    $l: 96%;
    @if lightness($color) > 96% {
      $l: lightness($color);
    }
    @return change-color($color, $lightness: $l);
  }
  @return $background;
}

@function findDarkColor($color) {
  @if type-of($color) == 'color' {
    $base-l: 29%;
    $luminance: colorLuminance($color);
    $luminance-delta: (0.53 - $luminance);
    $target-l: round($base-l + ($luminance-delta * 53));
    @return change-color($color, $lightness: max($base-l, $target-l));
  }
  @return $text-strong;
}

@function Darken($color, $amount) {
  @if type-of($color) != 'color' {
    @return $color;
  }
  @return darken($color, $amount);
}

@function Lighten($color, $amount) {
  @if type-of($color) != 'color' {
    @return $color;
  }
  @return lighten($color, $amount);
}
