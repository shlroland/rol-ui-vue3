var s=Object.assign;import{s as a,n,o as e,c as l,g as t,m as o,r as c,a as p,w as d,F as r,b as i,f as h,h as g,t as u,i as v,j}from"./index.e2306e92.js";const m={},_={class:"w-full h-96 bg-gray-200 flex justify-center items-center"};m.render=function(s,t){const o=a("loading");return n((e(),l("div",_," 等待中 ",512)),[[o,!0]])};const f={},y={"rol-loading-text":"拼命加载中","rol-loading-spinner":"spinner","rol-loading-background":"rgba(0, 0, 0, 0.8)",class:"w-full h-96 bg-gray-200 flex justify-center items-center"};f.render=function(s,t){const o=a("loading");return n((e(),l("div",y," 等待中 ",512)),[[o,!0]])};const k={setup(s,a){const n=t(!1),e=o().appContext.config.globalProperties.$loading;return{fullscreenLoading:n,openFullScreen1:()=>{n.value=!0,setTimeout((()=>{n.value=!1}),2e3)},openFullScreen2:()=>{const s=e({lock:!0,text:"Loading",spinner:"spinner",background:"rgba(0, 0, 0, 0.7)"});setTimeout((()=>{s.close()}),2e3)}}}},b=i(" 指令方式 "),w=i(" 服务方式 ");k.render=function(s,t,o,i,h,g){const u=c("rol-button"),v=a("loading");return e(),l(r,null,[n(p(u,{type:"primary",onClick:i.openFullScreen1},{default:d((()=>[b])),_:1},8,["onClick"]),[[v,i.fullscreenLoading,void 0,{fullscreen:!0}]]),p(u,{style:{"margin-left":"1.5em"},type:"primary",onClick:i.openFullScreen2},{default:d((()=>[w])),_:1},8,["onClick"])],64)};const L=h({components:{vdpv_0:m,vdpv_1:f,vdpv_2:k},setup(a){const n=t(),e=t(),l=t(),o=[n,e,l],c=g({vdpv_0Height:"0px",vdpv_1Height:"0px",vdpv_2Height:"0px"});return s(s({toggleCode:s=>{const a="vdpv_"+s;"0px"===c[a+"Height"]?c[a+"Height"]=((o[s].value?o[s].value.offsetHeight:0)||0)+"px":c[a+"Height"]="0px"}},u(c)),{vdpv_0Ref:n,vdpv_1Ref:e,vdpv_2Ref:l})}});L.$vd={matter:{title:"Loading",description:"Loading component doc",wrapperClass:"loading-demo-wrapper",tags:["components","feedback"]},toc:[{content:"Loading 加载",anchor:"loading-加载",level:1},{content:"区域加载",anchor:"区域加载",level:2},{content:"自定义",anchor:"自定义",level:2},{content:"整页加载",anchor:"整页加载",level:2},{content:"服务",anchor:"服务",level:2},{content:"Options",anchor:"options",level:3}]};const q=L,x={class:"vuedoc  loading-demo-wrapper"},C=j('<h1 id="loading-加载" data-source-line="2"><a class="markdownIt-Anchor" href="#loading-加载">#</a> Loading 加载</h1><p data-source-line="4">加载数据时显示动效。</p><h2 id="区域加载" data-source-line="6"><a class="markdownIt-Anchor" href="#区域加载">#</a> 区域加载</h2><p data-source-line="8">在容器中加载数据时显示。</p><pre style="display:none;"></pre>',5),I={class:"vuedoc-demo "},H={class:"vuedoc-demo__inner"},S={class:"vuedoc-demo__preview"},F={ref:"vdpv_0Ref",class:"vuedoc-demo__sourceref"},R=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-full h-96 bg-gray-200 flex justify-center items-center&quot;</span>&gt;</span>\n    等待中\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n</span></code></pre></div>',1),A=j('<h2 id="自定义" data-source-line="18"><a class="markdownIt-Anchor" href="#自定义">#</a> 自定义</h2><p data-source-line="20">可自定义加载文案、图标和背景色。</p><p data-source-line="22">在绑定了<code>v-loading</code>指令的元素上添加<code>rol-loading-text</code>属性，其值会被渲染为加载文案，并显示在加载图标的下方。类似地，<code>rol-loading-spinner</code>和<code>rol-loading-background</code>属性分别用来设定图标类名和背景色值。</p><pre style="display:none;"></pre>',4),O={class:"vuedoc-demo "},$={class:"vuedoc-demo__inner"},T={class:"vuedoc-demo__preview"},D={ref:"vdpv_1Ref",class:"vuedoc-demo__sourceref"},M=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>\n    <span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;true&quot;</span>\n    <span class="hljs-attr">rol-loading-text</span>=<span class="hljs-string">&quot;拼命加载中&quot;</span>\n    <span class="hljs-attr">rol-loading-spinner</span>=<span class="hljs-string">&quot;spinner&quot;</span>\n    <span class="hljs-attr">rol-loading-background</span>=<span class="hljs-string">&quot;rgba(0, 0, 0, 0.8)&quot;</span>\n    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-full h-96 bg-gray-200 flex justify-center items-center&quot;</span>\n  &gt;</span>\n    等待中\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n</span></code></pre></div>',1),P=j('<h2 id="整页加载" data-source-line="38"><a class="markdownIt-Anchor" href="#整页加载">#</a> 整页加载</h2><p data-source-line="40">页面数据加载时显示。</p><p data-source-line="42">当使用指令方式时，全屏遮罩需要添加<code>fullscreen</code>修饰符（遮罩会插入至 body 上）。</p><pre style="display:none;"></pre>',4),z={class:"vuedoc-demo "},B={class:"vuedoc-demo__inner"},E={class:"vuedoc-demo__preview"},G={ref:"vdpv_2Ref",class:"vuedoc-demo__sourceref"},J=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;openFullScreen1&quot;</span> <span class="hljs-attr">v-loading.fullscreen</span>=<span class="hljs-string">&quot;fullscreenLoading&quot;</span>&gt;</span>\n    指令方式\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 1.5em&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;openFullScreen2&quot;</span>&gt;</span>\n    服务方式\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { ref, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props, ctx</span>)</span> {\n    <span class="hljs-keyword">const</span> fullscreenLoading = ref(<span class="hljs-literal">false</span>)\n    <span class="hljs-keyword">const</span> $loading = getCurrentInstance().appContext.config.globalProperties.$loading\n\n    <span class="hljs-keyword">const</span> openFullScreen1 = <span class="hljs-function">() =&gt;</span> {\n      fullscreenLoading.value = <span class="hljs-literal">true</span>\n      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n        fullscreenLoading.value = <span class="hljs-literal">false</span>\n      }, <span class="hljs-number">2000</span>)\n    }\n\n    <span class="hljs-keyword">const</span> openFullScreen2 = <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> loading = $loading({\n        <span class="hljs-attr">lock</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">text</span>: <span class="hljs-string">&#39;Loading&#39;</span>,\n        <span class="hljs-attr">spinner</span>: <span class="hljs-string">&#39;spinner&#39;</span>,\n        <span class="hljs-attr">background</span>: <span class="hljs-string">&#39;rgba(0, 0, 0, 0.7)&#39;</span>,\n      })\n      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n        loading.close()\n      }, <span class="hljs-number">2000</span>)\n    }\n\n    <span class="hljs-keyword">return</span> {\n      fullscreenLoading,\n      openFullScreen1,\n      openFullScreen2,\n    }\n  },\n}\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),K=j('<h2 id="服务" data-source-line="90"><a class="markdownIt-Anchor" href="#服务">#</a> 服务</h2><p data-source-line="92">Loading 还可以以服务的方式调用。引入 Loading 服务：</p><pre style="display:none;"></pre><pre class="hljs vuedoc__hljs language-javascript hljs--one-dark"><code><span class="hljs-keyword">import</span> { RolLoading } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;rol-ui&#39;</span>\n</code></pre><p data-source-line="98">在需要调用时：</p><pre style="display:none;"></pre><pre class="hljs vuedoc__hljs language-javascript hljs--one-dark"><code>RolLoading.service(options)\n</code></pre><p data-source-line="104">其中 <code>options</code> 参数为 Loading 的配置项，具体见下表。<code>LoadingService</code> 会返回一个 Loading 实例，可通过调用该实例的 <code>close</code> 方法来关闭它：</p><pre style="display:none;"></pre><pre class="hljs vuedoc__hljs language-javascript hljs--one-dark"><code><span class="hljs-keyword">let</span> loadingInstance = RolLoading.service(options)\n<span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-comment">// 以服务的方式调用的 Loading 需要异步关闭</span>\n  loadingInstance.close()\n})\n</code></pre><p data-source-line="114">需要注意的是，以服务的方式调用的全屏 Loading 是单例的：若在前一个全屏 Loading 关闭前再次调用全屏 Loading，并不会创建一个新的 Loading 实例，而是返回现有全屏 Loading 的实例：</p><pre style="display:none;"></pre><pre class="hljs vuedoc__hljs language-javascript hljs--one-dark"><code><span class="hljs-keyword">let</span> loadingInstance1 = RolLoading.service({ <span class="hljs-attr">fullscreen</span>: <span class="hljs-literal">true</span> })\n<span class="hljs-keyword">let</span> loadingInstance2 = RolLoading.service({ <span class="hljs-attr">fullscreen</span>: <span class="hljs-literal">true</span> })\n<span class="hljs-built_in">console</span>.log(loadingInstance1 === loadingInstance2)\n</code></pre><p data-source-line="122">此时调用它们中任意一个的 <code>close</code> 方法都能关闭这个全屏 Loading。</p><h3 id="options" data-source-line="124"><a class="markdownIt-Anchor" href="#options">#</a> Options</h3><table data-source-line="126"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>target</td><td>Loading 需要覆盖的 DOM 节点。可传入一个 DOM 对象或字符串；若传入字符串，则会将其作为参数传入 <code>document.querySelector</code>以获取到对应 DOM 节点</td><td>object/string</td><td>—</td><td>document.body</td></tr><tr><td>body</td><td>同 <code>v-loading</code> 指令中的 <code>body</code> 修饰符</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>fullscreen</td><td>同 <code>v-loading</code> 指令中的 <code>fullscreen</code> 修饰符</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>text</td><td>显示在加载图标下方的加载文案</td><td>string</td><td>—</td><td>—</td></tr><tr><td>spinner</td><td>自定义加载图标类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>background</td><td>遮罩背景色</td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>Loading 的自定义类名</td><td>string</td><td>—</td><td>—</td></tr></tbody></table>',16);q.render=function(s,a,n,t,o,d){const r=c("vdpv_0"),i=c("vdpv_1"),h=c("vdpv_2");return e(),l("div",x,[C,p("div",I,[p("div",H,[p("div",S,[p(r)]),p("div",{style:{height:s.vdpv_0Height},class:"vuedoc-demo__source"},[p("div",F,[R],512)],4),p("div",{class:"vuedoc-demo__footer",onClick:a[1]||(a[1]=a=>s.toggleCode(0))},v(s.vdpv_0Height>0?"hidden":"show"),1)])]),A,p("div",O,[p("div",$,[p("div",T,[p(i)]),p("div",{style:{height:s.vdpv_1Height},class:"vuedoc-demo__source"},[p("div",D,[M],512)],4),p("div",{class:"vuedoc-demo__footer",onClick:a[2]||(a[2]=a=>s.toggleCode(1))},v(s.vdpv_1Height>0?"hidden":"show"),1)])]),P,p("div",z,[p("div",B,[p("div",E,[p(h)]),p("div",{style:{height:s.vdpv_2Height},class:"vuedoc-demo__source"},[p("div",G,[J],512)],4),p("div",{class:"vuedoc-demo__footer",onClick:a[3]||(a[3]=a=>s.toggleCode(2))},v(s.vdpv_2Height>0?"hidden":"show"),1)])]),K])};export default q;
