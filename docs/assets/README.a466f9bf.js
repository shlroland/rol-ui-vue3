var t=Object.assign;import{g as s,r as a,o as l,c as n,a as d,w as e,F as o,m as p,b as c,f as r,h as i,t as h,i as g,j as u}from"./index.b6e0c42c.js";const j={setup(){const t=s(!1),a=p();return{dialogVisible:t,handleClose:t=>{a.ctx.$confirm("确认关闭？").then((s=>{t()})).catch((t=>{}))}}}},m=c("点击打开 Dialog"),b=d("span",null,"这是一段信息",-1),v={class:"dialog-footer"},f=c("取 消"),y=c("确 定");j.render=function(t,s,p,c,r,i){const h=a("rol-button"),g=a("rol-modal");return l(),n(o,null,[d(h,{type:"text",onClick:s[1]||(s[1]=t=>c.dialogVisible=!0)},{default:e((()=>[m])),_:1}),d(g,{title:"提示",visible:c.dialogVisible,"onUpdate:visible":s[4]||(s[4]=t=>c.dialogVisible=t),width:"30%","before-close":c.handleClose},{footer:e((()=>[d("span",v,[d(h,{onClick:s[2]||(s[2]=t=>c.dialogVisible=!1)},{default:e((()=>[f])),_:1}),d(h,{type:"primary",onClick:s[3]||(s[3]=t=>c.dialogVisible=!1)},{default:e((()=>[y])),_:1})])])),default:e((()=>[b])),_:1},8,["visible","before-close"])],64)};const _=r({components:{vdpv_0:j},setup(a){const l=s(),n=[l],d=i({vdpv_0Height:"0px"});return t(t({toggleCode:t=>{const s="vdpv_"+t;"0px"===d[s+"Height"]?d[s+"Height"]=((n[t].value?n[t].value.offsetHeight:0)||0)+"px":d[s+"Height"]="0px"}},h(d)),{vdpv_0Ref:l})}});_.$vd={matter:{title:"Modal",description:"Modal component doc",wrapperClass:"modal-demo-wrapper",tags:["components","feedback"]},toc:[{content:"Modal 对话框",anchor:"modal-对话框",level:1},{content:"基础用法",anchor:"基础用法",level:2},{content:"Attributes",anchor:"attributes",level:3},{content:"Slot",anchor:"slot",level:3},{content:"Events",anchor:"events",level:3}]};const D=_,k={class:"vuedoc  modal-demo-wrapper"},w=u('<h1 id="modal-对话框" data-source-line="2"><a class="markdownIt-Anchor" href="#modal-对话框">#</a> Modal 对话框</h1><p data-source-line="4">在保留当前页面状态的情况下，告知用户并承载相关操作。</p><h2 id="基础用法" data-source-line="6"><a class="markdownIt-Anchor" href="#基础用法">#</a> 基础用法</h2><p data-source-line="8">需要设置<code>visible</code>属性，它接收<code>Boolean</code>，当为<code>true</code>时显示 Dialog。Dialog 分为两个部分：<code>body</code>和<code>footer</code>，<code>footer</code>需要具名为<code>footer</code>的<code>slot</code>。<code>title</code>属性用于定义标题，它是可选的，默认值为空。最后，本例还展示了<code>before-close</code>的用法。</p><pre style="display:none;"></pre>',5),q={class:"vuedoc-demo "},C={class:"vuedoc-demo__inner"},x={class:"vuedoc-demo__preview"},V={ref:"vdpv_0Ref",class:"vuedoc-demo__sourceref"},A=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = true&quot;</span>&gt;</span>点击打开 Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-modal</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;提示&quot;</span> <span class="hljs-attr">v-model:visible</span>=<span class="hljs-string">&quot;dialogVisible&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30%&quot;</span> <span class="hljs-attr">:before-close</span>=<span class="hljs-string">&quot;handleClose&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是一段信息<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog-footer&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = false&quot;</span>&gt;</span>取 消<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = false&quot;</span>&gt;</span>确 定<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { ref, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> dialogVisible = ref(<span class="hljs-literal">false</span>)\n    <span class="hljs-keyword">const</span> instance = getCurrentInstance()\n\n    <span class="hljs-keyword">const</span> handleClose = <span class="hljs-function"><span class="hljs-params">done</span> =&gt;</span> {\n      instance.ctx\n        .$confirm(<span class="hljs-string">&#39;确认关闭？&#39;</span>)\n        .then(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> {\n          done()\n        })\n        .catch(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> {})\n    }\n\n    <span class="hljs-keyword">return</span> {\n      dialogVisible,\n      handleClose,\n    }\n  },\n}\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),H=u('<h3 id="attributes" data-source-line="51"><a class="markdownIt-Anchor" href="#attributes">#</a> Attributes</h3><table data-source-line="53"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>visible(v-model)</td><td>是否显示 Dialog</td><td>boolean</td><td>—</td><td>—</td></tr><tr><td>title</td><td>Dialog 的标题，也可通过具名 slot （见下表）传入</td><td>string</td><td>—</td><td>—</td></tr><tr><td>width</td><td>Dialog 的宽度</td><td>string</td><td>—</td><td>50%</td></tr><tr><td>fullscreen</td><td>是否为全屏 Dialog</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>top</td><td>Dialog CSS 中的 margin-top 值</td><td>string</td><td>—</td><td>15vh</td></tr><tr><td>overlay</td><td>是否需要遮罩层</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>append-to-body</td><td>Dialog 自身是否插入至 body 元素上。嵌套的 Dialog 必须指定该属性并赋值为 true</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>lock-scroll</td><td>是否在 Dialog 出现时将 body 滚动锁定</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>custom-class</td><td>Dialog 的自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>open-delay</td><td>Dialog 打开的延时时间，单位毫秒</td><td>number</td><td>—</td><td>0</td></tr><tr><td>close-delay</td><td>Dialog 关闭的延时时间，单位毫秒</td><td>number</td><td>—</td><td>0</td></tr><tr><td>close-on-click-modal</td><td>是否可以通过点击 modal 关闭 Dialog</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>close-on-press-escape</td><td>是否可以通过按下 ESC 关闭 Dialog</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>show-close</td><td>是否显示关闭按钮</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>before-close</td><td>关闭前的回调，会暂停 Dialog 的关闭</td><td>function(done)，done 用于关闭 Dialog</td><td>—</td><td>—</td></tr><tr><td>center</td><td>是否对头部和底部采用居中布局</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>destroy-on-close</td><td>关闭时销毁 Dialog 中的元素</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id="slot" data-source-line="73"><a class="markdownIt-Anchor" href="#slot">#</a> Slot</h3><table data-source-line="75"><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>—</td><td>Dialog 的内容</td></tr><tr><td>title</td><td>Dialog 标题区的内容</td></tr><tr><td>footer</td><td>Dialog 按钮操作区的内容</td></tr></tbody></table><h3 id="events" data-source-line="81"><a class="markdownIt-Anchor" href="#events">#</a> Events</h3><table data-source-line="83"><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>open</td><td>Dialog 打开的回调</td><td>—</td></tr><tr><td>opened</td><td>Dialog 打开动画结束时的回调</td><td>—</td></tr><tr><td>close</td><td>Dialog 关闭的回调</td><td>—</td></tr><tr><td>closed</td><td>Dialog 关闭动画结束时的回调</td><td>—</td></tr></tbody></table>',6);D.render=function(t,s,e,o,p,c){const r=a("vdpv_0");return l(),n("div",k,[w,d("div",q,[d("div",C,[d("div",x,[d(r)]),d("div",{style:{height:t.vdpv_0Height},class:"vuedoc-demo__source"},[d("div",V,[A],512)],4),d("div",{class:"vuedoc-demo__footer",onClick:s[1]||(s[1]=s=>t.toggleCode(0))},g(t.vdpv_0Height>0?"hidden":"show"),1)])]),H])};export default D;
