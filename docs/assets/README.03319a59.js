var s=Object.assign;import{f as a,m as n,u as l,r as t,o as e,c as p,a as o,w as c,F as r,b as d,g as h,h as i,t as g,i as u,j}from"./index.b6e0c42c.js";const m=a({setup(){const s=n().appContext.config.globalProperties;return{open(){s.$message("只是一条消息提示")},openVn(){s.$message({message:l("p",null,[l("span",null,"内容可以是 "),l("i",{style:"color: teal"},"VNode")])})}}}}),v=d("打开消息提示"),f=d("VNode");m.render=function(s,a,n,l,d,h){const i=t("rol-button");return e(),p(r,null,[o(i,{onClick:s.open},{default:c((()=>[v])),_:1},8,["onClick"]),o(i,{style:{"margin-left":"15px"},onClick:s.openVn},{default:c((()=>[f])),_:1},8,["onClick"])],64)};const _=a({setup(){const s=n().appContext.config.globalProperties;return{open1(){s.$message.success("只是一条成功提示")},open2(){s.$message.warning("只是一条警告提示")},open3(){s.$message("只是一条消息提示")},open4(){s.$message.danger("只是一条错误提示")}}}}),k=d("成功"),y=d("警告"),C=d("消息"),b=d("错误");_.render=function(s,a,n,l,d,h){const i=t("rol-button");return e(),p(r,null,[o(i,{onClick:s.open1},{default:c((()=>[k])),_:1},8,["onClick"]),o(i,{style:{"margin-left":"15px"},onClick:s.open2},{default:c((()=>[y])),_:1},8,["onClick"]),o(i,{style:{"margin-left":"15px"},onClick:s.open3},{default:c((()=>[C])),_:1},8,["onClick"]),o(i,{style:{"margin-left":"15px"},onClick:s.open4},{default:c((()=>[b])),_:1},8,["onClick"])],64)};const w=a({setup(){const s=n().appContext.config.globalProperties;return{open1(){s.$message({showClose:!0,message:"这是一条消息提示"})},open2(){s.$message({showClose:!0,message:"恭喜你，这是一条成功消息",type:"success"})},open3(){s.$message({showClose:!0,message:"警告哦，这是一条警告消息",type:"warning"})},open4(){s.$message({showClose:!0,message:"错了哦，这是一条错误消息",type:"danger"})}}}}),x=d("成功"),q=d("警告"),M=d("消息"),H=d("错误");w.render=function(s,a,n,l,d,h){const i=t("rol-button");return e(),p(r,null,[o(i,{onClick:s.open1},{default:c((()=>[x])),_:1},8,["onClick"]),o(i,{style:{"margin-left":"15px"},onClick:s.open2},{default:c((()=>[q])),_:1},8,["onClick"]),o(i,{style:{"margin-left":"15px"},onClick:s.open3},{default:c((()=>[M])),_:1},8,["onClick"]),o(i,{style:{"margin-left":"15px"},onClick:s.open4},{default:c((()=>[H])),_:1},8,["onClick"])],64)};const $=a({setup(){const s=n().appContext.config.globalProperties;return{openCenter(){s.$message({message:"居中的文字",center:!0})}}}}),I=d("文字居中");$.render=function(s,a,n,l,o,r){const d=t("rol-button");return e(),p(d,{plain:!0,onClick:s.openCenter},{default:c((()=>[I])),_:1},8,["onClick"])};const F=a({setup(){const s=n().appContext.config.globalProperties;return{openHTML(){s.$message({dangerouslyUseHTMLString:!0,message:"<strong>这是 <i>HTML</i> 片段</strong>"})}}}}),R=d("使用 HTML 片段");F.render=function(s,a,n,l,o,r){const d=t("rol-button");return e(),p(d,{plain:!0,onClick:s.openHTML},{default:c((()=>[R])),_:1},8,["onClick"])};const L=a({components:{vdpv_0:m,vdpv_1:_,vdpv_2:w,vdpv_3:$,vdpv_4:F},setup(a){const n=h(),l=h(),t=h(),e=h(),p=h(),o=[n,l,t,e,p],c=i({vdpv_0Height:"0px",vdpv_1Height:"0px",vdpv_2Height:"0px",vdpv_3Height:"0px",vdpv_4Height:"0px"});return s(s({toggleCode:s=>{const a="vdpv_"+s;"0px"===c[a+"Height"]?c[a+"Height"]=((o[s].value?o[s].value.offsetHeight:0)||0)+"px":c[a+"Height"]="0px"}},g(c)),{vdpv_0Ref:n,vdpv_1Ref:l,vdpv_2Ref:t,vdpv_3Ref:e,vdpv_4Ref:p})}});L.$vd={matter:{title:"Message",description:"Message component doc",wrapperClass:"message-demo-wrapper",tags:["components","feedback"]},toc:[{content:"Message 消息提示",anchor:"message-消息提示",level:1},{content:"基础用法",anchor:"基础用法",level:2},{content:"不同状态",anchor:"不同状态",level:2},{content:"可关闭",anchor:"可关闭",level:2},{content:"文字居中",anchor:"文字居中",level:2},{content:"使用 HTML 片段",anchor:"使用-html-片段",level:2},{content:"单独引用",anchor:"单独引用",level:3},{content:"Options",anchor:"options",level:3},{content:"方法",anchor:"方法",level:3}]};const T=L,P={class:"vuedoc  message-demo-wrapper"},A=j('<h1 id="message-消息提示" data-source-line="2"><a class="markdownIt-Anchor" href="#message-消息提示">#</a> Message 消息提示</h1><p data-source-line="4">常用于主动操作后的反馈提示。与 Notification 的区别是后者更多用于系统级通知的被动提醒。</p><h2 id="基础用法" data-source-line="6"><a class="markdownIt-Anchor" href="#基础用法">#</a> 基础用法</h2><p data-source-line="8">Message 在配置上与 Notification 非常类似，所以部分 options 在此不做详尽解释，文末有 options 列表，可以结合 Notification 的文档理解它们。全局注册了一个<code>$message</code>方法用于调用，Message 可以接收一个字符串或一个 VNode 作为参数，它会被显示为正文内容。</p><pre style="display:none;"></pre>',5),N={class:"vuedoc-demo "},V={class:"vuedoc-demo__inner"},W={class:"vuedoc-demo__preview"},S={ref:"vdpv_0Ref",class:"vuedoc-demo__sourceref"},U=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open&quot;</span>&gt;</span>打开消息提示<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;openVn&quot;</span>&gt;</span>VNode<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message(<span class="hljs-string">&#39;只是一条消息提示&#39;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">openVn</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message({\n          <span class="hljs-attr">message</span>: h(<span class="hljs-string">&#39;p&#39;</span>, <span class="hljs-literal">null</span>, [h(<span class="hljs-string">&#39;span&#39;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#39;内容可以是 &#39;</span>), h(<span class="hljs-string">&#39;i&#39;</span>, { <span class="hljs-attr">style</span>: <span class="hljs-string">&#39;color: teal&#39;</span> }, <span class="hljs-string">&#39;VNode&#39;</span>)]),\n        })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),O=j('<h2 id="不同状态" data-source-line="37"><a class="markdownIt-Anchor" href="#不同状态">#</a> 不同状态</h2><p data-source-line="39">当需要自定义更多属性时，Message 也可以接收一个对象为参数。比如，设置<code>type</code>字段可以定义不同的状态，默认为<code>info</code>。此时正文内容以<code>message</code>的值传入。同时，我们也为 Message 的各种 type 注册了方法，可以在不传入<code>type</code>字段的情况下像<code>open4</code>那样直接调用。</p><pre style="display:none;"></pre>',3),z={class:"vuedoc-demo "},B={class:"vuedoc-demo__inner"},D={class:"vuedoc-demo__preview"},E={ref:"vdpv_1Ref",class:"vuedoc-demo__sourceref"},G=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open1&quot;</span>&gt;</span>成功<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open2&quot;</span>&gt;</span>警告<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open3&quot;</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open4&quot;</span>&gt;</span>错误<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">open1</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message.success(<span class="hljs-string">&#39;只是一条成功提示&#39;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">open2</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message.warning(<span class="hljs-string">&#39;只是一条警告提示&#39;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">open3</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message(<span class="hljs-string">&#39;只是一条消息提示&#39;</span>)\n      },\n      <span class="hljs-function"><span class="hljs-title">open4</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message.danger(<span class="hljs-string">&#39;只是一条错误提示&#39;</span>)\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),J=o("h2",{id:"可关闭","data-source-line":"74"},[o("a",{class:"markdownIt-Anchor",href:"#可关闭"},"#"),d(" 可关闭")],-1),K=o("p",{"data-source-line":"76"},[d("默认的 Message 是不可以被人工关闭的，如果需要可手动关闭的 Message，可以使用"),o("code",null,"showClose"),d("字段。此外，和 Notification 一样，Message 拥有可控的"),o("code",null,"duration"),d("，设置"),o("code",null,"0"),d("为不会被自动关闭，默认为 3000 毫秒。")],-1),Q=o("pre",{style:{display:"none"}},null,-1),X={class:"vuedoc-demo "},Y={class:"vuedoc-demo__inner"},Z={class:"vuedoc-demo__preview"},ss={ref:"vdpv_2Ref",class:"vuedoc-demo__sourceref"},as=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open1&quot;</span>&gt;</span>成功<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open2&quot;</span>&gt;</span>警告<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open3&quot;</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open4&quot;</span>&gt;</span>错误<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">open1</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message({\n          <span class="hljs-attr">showClose</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;这是一条消息提示&#39;</span>,\n        })\n      },\n      <span class="hljs-function"><span class="hljs-title">open2</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message({\n          <span class="hljs-attr">showClose</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;恭喜你，这是一条成功消息&#39;</span>,\n          <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;success&#39;</span>,\n        })\n      },\n      <span class="hljs-function"><span class="hljs-title">open3</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message({\n          <span class="hljs-attr">showClose</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;警告哦，这是一条警告消息&#39;</span>,\n          <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;warning&#39;</span>,\n        })\n      },\n      <span class="hljs-function"><span class="hljs-title">open4</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message({\n          <span class="hljs-attr">showClose</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;错了哦，这是一条错误消息&#39;</span>,\n          <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;danger&#39;</span>,\n        })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),ns=o("h2",{id:"文字居中","data-source-line":"126"},[o("a",{class:"markdownIt-Anchor",href:"#文字居中"},"#"),d(" 文字居中")],-1),ls=o("p",{"data-source-line":"128"},[d("使用 "),o("code",null,"center"),d(" 属性让文字水平居中。")],-1),ts=o("pre",{style:{display:"none"}},null,-1),es={class:"vuedoc-demo "},ps={class:"vuedoc-demo__inner"},os={class:"vuedoc-demo__preview"},cs={ref:"vdpv_3Ref",class:"vuedoc-demo__sourceref"},rs=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">:plain</span>=<span class="hljs-string">&quot;true&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;openCenter&quot;</span>&gt;</span>文字居中<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">openCenter</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message({\n          <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;居中的文字&#39;</span>,\n          <span class="hljs-attr">center</span>: <span class="hljs-literal">true</span>,\n        })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),ds=o("h2",{id:"使用-html-片段","data-source-line":"154"},[o("a",{class:"markdownIt-Anchor",href:"#使用-html-片段"},"#"),d(" 使用 HTML 片段")],-1),hs=o("p",{"data-source-line":"156"},[d("将"),o("code",null,"dangerouslyUseHTMLString"),d("属性设置为 true，"),o("code",null,"message"),d(" 就会被当作 HTML 片段处理。")],-1),is=o("pre",{style:{display:"none"}},null,-1),gs={class:"vuedoc-demo "},us={class:"vuedoc-demo__inner"},js={class:"vuedoc-demo__preview"},ms={ref:"vdpv_4Ref",class:"vuedoc-demo__sourceref"},vs=j('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">:plain</span>=<span class="hljs-string">&quot;true&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;openHTML&quot;</span>&gt;</span>使用 HTML 片段<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">openHTML</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$message({\n          <span class="hljs-attr">dangerouslyUseHTMLString</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;&lt;strong&gt;这是 &lt;i&gt;HTML&lt;/i&gt; 片段&lt;/strong&gt;&#39;</span>,\n        })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),fs=j('<p data-source-line="182">Rol-ui 为 <code>app.config.globalProperties</code> 添加了全局方法 $message。因此在 vue instance 中可以采用在 method 中调用 <code>this.$message</code> 方法唤起 <code>RolMessage</code>。</p><h3 id="单独引用" data-source-line="184"><a class="markdownIt-Anchor" href="#单独引用">#</a> 单独引用</h3><pre style="display:none;"></pre><pre class="hljs vuedoc__hljs language-javascript hljs--one-dark"><code><span class="hljs-keyword">import</span> { RolMessageWrap } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;rol-ui&#39;</span>\n</code></pre><p data-source-line="190">此时调用方法为 <code>RolMessageWrap(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>RolMessageWrap.success(options)</code>。并且可以调用 <code>RolMessageWrap.closeAll()</code> 手动关闭所有实例。</p><h3 id="options" data-source-line="192"><a class="markdownIt-Anchor" href="#options">#</a> Options</h3><table data-source-line="194"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>message</td><td>消息文字</td><td>string / VNode</td><td>—</td><td>—</td></tr><tr><td>type</td><td>主题</td><td>string</td><td>success/warning/info/error</td><td>info</td></tr><tr><td>iconClass</td><td>自定义图标的类名，会覆盖 <code>type</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>是否将 message 属性作为 HTML 片段处理</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>customClass</td><td>自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>duration</td><td>显示时间, 毫秒。设为 0 则不会自动关闭</td><td>number</td><td>—</td><td>3000</td></tr><tr><td>showClose</td><td>是否显示关闭按钮</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>center</td><td>文字是否居中</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>onClose</td><td>关闭时的回调函数, 参数为被关闭的 message 实例</td><td>function</td><td>—</td><td>—</td></tr><tr><td>offset</td><td>Message 距离窗口顶部的偏移量</td><td>number</td><td>—</td><td>20</td></tr></tbody></table><h3 id="方法" data-source-line="207"><a class="markdownIt-Anchor" href="#方法">#</a> 方法</h3><p data-source-line="209">调用 <code>RolMessageWrap</code> 或 <code>this.$message</code> 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 <code>close</code> 方法。</p><table data-source-line="210"><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>close</td><td>关闭当前的 Message</td></tr></tbody></table>',10);T.render=function(s,a,n,l,c,r){const d=t("vdpv_0"),h=t("vdpv_1"),i=t("vdpv_2"),g=t("vdpv_3"),j=t("vdpv_4");return e(),p("div",P,[A,o("div",N,[o("div",V,[o("div",W,[o(d)]),o("div",{style:{height:s.vdpv_0Height},class:"vuedoc-demo__source"},[o("div",S,[U],512)],4),o("div",{class:"vuedoc-demo__footer",onClick:a[1]||(a[1]=a=>s.toggleCode(0))},u(s.vdpv_0Height>0?"hidden":"show"),1)])]),O,o("div",z,[o("div",B,[o("div",D,[o(h)]),o("div",{style:{height:s.vdpv_1Height},class:"vuedoc-demo__source"},[o("div",E,[G],512)],4),o("div",{class:"vuedoc-demo__footer",onClick:a[2]||(a[2]=a=>s.toggleCode(1))},u(s.vdpv_1Height>0?"hidden":"show"),1)])]),J,K,Q,o("div",X,[o("div",Y,[o("div",Z,[o(i)]),o("div",{style:{height:s.vdpv_2Height},class:"vuedoc-demo__source"},[o("div",ss,[as],512)],4),o("div",{class:"vuedoc-demo__footer",onClick:a[3]||(a[3]=a=>s.toggleCode(2))},u(s.vdpv_2Height>0?"hidden":"show"),1)])]),ns,ls,ts,o("div",es,[o("div",ps,[o("div",os,[o(g)]),o("div",{style:{height:s.vdpv_3Height},class:"vuedoc-demo__source"},[o("div",cs,[rs],512)],4),o("div",{class:"vuedoc-demo__footer",onClick:a[4]||(a[4]=a=>s.toggleCode(3))},u(s.vdpv_3Height>0?"hidden":"show"),1)])]),ds,hs,is,o("div",gs,[o("div",us,[o("div",js,[o(j)]),o("div",{style:{height:s.vdpv_4Height},class:"vuedoc-demo__source"},[o("div",ms,[vs],512)],4),o("div",{class:"vuedoc-demo__footer",onClick:a[5]||(a[5]=a=>s.toggleCode(4))},u(s.vdpv_4Height>0?"hidden":"show"),1)])]),fs])};export default T;
