var s=Object.assign;import{m as n,u as a,r as t,o as l,c as e,a as p,w as o,F as c,b as r,f as d,g as i,h,t as g,i as j,j as u}from"./index.e2306e92.js";const f={setup(){const s=n().appContext.config.globalProperties;return{open1:()=>{s.$notify({title:"标题名称",message:a("i",{style:"color: teal"},"这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案")})},open2:()=>{s.$notify({title:"提示",message:"这是一条不会自动关闭的消息",duration:0})}}}},m=r(" 可自动关闭 "),v=r(" 不会自动关闭 ");f.render=function(s,n,a,r,d,i){const h=t("rol-button");return l(),e(c,null,[p(h,{onClick:r.open1},{default:o((()=>[m])),_:1},8,["onClick"]),p(h,{style:{"margin-left":"15px"},onClick:r.open2},{default:o((()=>[v])),_:1},8,["onClick"])],64)};const y={setup(){const s=n().appContext.config.globalProperties;return{open1:()=>{s.$notify({title:"成功",message:"这是一条成功的提示消息",type:"success"})},open2:()=>{s.$notify({title:"警告",message:"这是一条警告的提示消息",type:"warning"})},open3:()=>{s.$notify({title:"消息",message:"这是一条消息的提示消息"})},open4:()=>{s.$notify({title:"错误",message:"这是一条错误的提示消息",type:"danger"})}}}},_=r(" 成功 "),k=r(" 警告 "),b=r(" 消息 "),w=r(" 错误 ");y.render=function(s,n,a,r,d,i){const h=t("rol-button");return l(),e(c,null,[p(h,{onClick:r.open1},{default:o((()=>[_])),_:1},8,["onClick"]),p(h,{style:{"margin-left":"15px"},onClick:r.open2},{default:o((()=>[k])),_:1},8,["onClick"]),p(h,{style:{"margin-left":"15px"},onClick:r.open3},{default:o((()=>[b])),_:1},8,["onClick"]),p(h,{style:{"margin-left":"15px"},onClick:r.open4},{default:o((()=>[w])),_:1},8,["onClick"])],64)};const C={setup(){const s=n().appContext.config.globalProperties;return{open1:()=>{s.$notify({title:"自定义位置",message:"右上角弹出的消息"})},open2:()=>{s.$notify({title:"自定义位置",message:"右下角弹出的消息",position:"bottom-right"})},open3:()=>{s.$notify({title:"自定义位置",message:"左下角弹出的消息",position:"bottom-left"})},open4:()=>{s.$notify({title:"自定义位置",message:"左上角弹出的消息",position:"top-left"})}}}},x=r(" 右上角 "),q=r(" 右下角 "),$=r(" 左下角 "),N=r(" 左上角 ");C.render=function(s,n,a,r,d,i){const h=t("rol-button");return l(),e(c,null,[p(h,{onClick:r.open1},{default:o((()=>[x])),_:1},8,["onClick"]),p(h,{style:{"margin-left":"15px"},onClick:r.open2},{default:o((()=>[q])),_:1},8,["onClick"]),p(h,{style:{"margin-left":"15px"},onClick:r.open3},{default:o((()=>[$])),_:1},8,["onClick"]),p(h,{style:{"margin-left":"15px"},onClick:r.open4},{default:o((()=>[N])),_:1},8,["onClick"])],64)};const H={setup(){const s=n().appContext.config.globalProperties;return{open1:()=>{s.$notify({title:"偏移",message:"这是一条带有偏移的提示消息",offset:100})}}}},I=r(" 偏移的消息 ");H.render=function(s,n,a,p,c,r){const d=t("rol-button");return l(),e(d,{onClick:p.open1},{default:o((()=>[I])),_:1},8,["onClick"])};const F=d({components:{vdpv_0:f,vdpv_1:y,vdpv_2:C,vdpv_3:H},setup(n){const a=i(),t=i(),l=i(),e=i(),p=[a,t,l,e],o=h({vdpv_0Height:"0px",vdpv_1Height:"0px",vdpv_2Height:"0px",vdpv_3Height:"0px"});return s(s({toggleCode:s=>{const n="vdpv_"+s;"0px"===o[n+"Height"]?o[n+"Height"]=((p[s].value?p[s].value.offsetHeight:0)||0)+"px":o[n+"Height"]="0px"}},g(o)),{vdpv_0Ref:a,vdpv_1Ref:t,vdpv_2Ref:l,vdpv_3Ref:e})}});F.$vd={matter:{title:"Notification",description:"Notification component doc",wrapperClass:"notification-demo-wrapper",tags:["components","feedback"]},toc:[{content:"Notification 通知",anchor:"notification-通知",level:1},{content:"基本用法",anchor:"基本用法",level:2},{content:"带有倾向性",anchor:"带有倾向性",level:2},{content:"自定义弹出位置",anchor:"自定义弹出位置",level:2},{content:"带有偏移",anchor:"带有偏移",level:2},{content:"全局方法",anchor:"全局方法",level:2},{content:"单独引用",anchor:"单独引用",level:3},{content:"Options",anchor:"options",level:3},{content:"方法",anchor:"方法",level:3}]};const R=F,A={class:"vuedoc  notification-demo-wrapper"},P=u('<h1 id="notification-通知" data-source-line="2"><a class="markdownIt-Anchor" href="#notification-通知">#</a> Notification 通知</h1><p data-source-line="4">悬浮出现在页面角落，显示全局的通知提醒消息。</p><h2 id="基本用法" data-source-line="6"><a class="markdownIt-Anchor" href="#基本用法">#</a> 基本用法</h2><p data-source-line="8">适用性广泛的通知栏</p><p data-source-line="10">Notification 组件提供通知功能，全局注册了<code>$notify</code>方法，接收一个<code>options</code>字面量参数，在最简单的情况下，你可以设置<code>title</code>字段和<code>message</code>字段，用于设置通知的标题和正文。默认情况下，经过一段时间后 Notification 组件会自动关闭，但是通过设置<code>duration</code>，可以控制关闭的时间间隔，特别的是，如果设置为<code>0</code>，则不会自动关闭。注意：<code>duration</code>接收一个<code>Number</code>，单位为毫秒，默认为<code>4500</code>。</p><pre style="display:none;"></pre>',6),W={class:"vuedoc-demo "},O={class:"vuedoc-demo__inner"},L={class:"vuedoc-demo__preview"},M={ref:"vdpv_0Ref",class:"vuedoc-demo__sourceref"},T=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open1&quot;</span>&gt;</span>\n    可自动关闭\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open2&quot;</span>&gt;</span>\n    不会自动关闭\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n   <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">const</span> open1 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;标题名称&#39;</span>,\n        <span class="hljs-attr">message</span>: h(\n          <span class="hljs-string">&#39;i&#39;</span>,\n          { <span class="hljs-attr">style</span>: <span class="hljs-string">&#39;color: teal&#39;</span> },\n          <span class="hljs-string">&#39;这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案&#39;</span>,\n        ),\n      })\n    }\n\n    <span class="hljs-keyword">const</span> open2 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;提示&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;这是一条不会自动关闭的消息&#39;</span>,\n        <span class="hljs-attr">duration</span>: <span class="hljs-number">0</span>,\n      })\n    }\n\n    <span class="hljs-keyword">return</span> {\n      open1,\n      open2,\n    }\n  },\n}\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),V=u('<h2 id="带有倾向性" data-source-line="57"><a class="markdownIt-Anchor" href="#带有倾向性">#</a> 带有倾向性</h2><p data-source-line="59">Notification 组件准备了四种通知类型：<code>success</code>, <code>warning</code>, <code>info</code>, <code>error</code>。通过<code>type</code>字段来设置，除此以外的值将被忽略。同时，我们也为 Notification 的各种 type 注册了方法，可以在不传入<code>type</code>字段的情况下像<code>open3</code>和<code>open4</code>那样直接调用。</p><pre style="display:none;"></pre>',3),S={class:"vuedoc-demo "},U={class:"vuedoc-demo__inner"},z={class:"vuedoc-demo__preview"},B={ref:"vdpv_1Ref",class:"vuedoc-demo__sourceref"},D=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open1&quot;</span>&gt;</span>\n    成功\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open2&quot;</span>&gt;</span>\n    警告\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open3&quot;</span>&gt;</span>\n    消息\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open4&quot;</span>&gt;</span>\n    错误\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">const</span> open1 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;成功&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;这是一条成功的提示消息&#39;</span>,\n        <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;success&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">const</span> open2 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;警告&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;这是一条警告的提示消息&#39;</span>,\n        <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;warning&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">const</span> open3 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;消息&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;这是一条消息的提示消息&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">const</span> open4 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;错误&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;这是一条错误的提示消息&#39;</span>,\n        <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;danger&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">return</span> {\n      open1,\n      open2,\n      open3,\n      open4,\n    }\n  },\n}\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),E=u('<h2 id="自定义弹出位置" data-source-line="126"><a class="markdownIt-Anchor" href="#自定义弹出位置">#</a> 自定义弹出位置</h2><p data-source-line="128">使用<code>position</code>属性定义 Notification 的弹出位置，支持四个选项：<code>top-right</code>、<code>top-left</code>、<code>bottom-right</code>、<code>bottom-left</code>，默认为<code>top-right</code>。</p><pre style="display:none;"></pre>',3),G={class:"vuedoc-demo "},J={class:"vuedoc-demo__inner"},K={class:"vuedoc-demo__preview"},Q={ref:"vdpv_2Ref",class:"vuedoc-demo__sourceref"},X=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open1&quot;</span>&gt;</span>\n    右上角\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open2&quot;</span>&gt;</span>\n    右下角\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open3&quot;</span>&gt;</span>\n    左下角\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 15px&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open4&quot;</span>&gt;</span>\n    左上角\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">const</span> open1 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;自定义位置&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;右上角弹出的消息&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">const</span> open2 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;自定义位置&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;右下角弹出的消息&#39;</span>,\n        <span class="hljs-attr">position</span>: <span class="hljs-string">&#39;bottom-right&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">const</span> open3 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;自定义位置&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;左下角弹出的消息&#39;</span>,\n        <span class="hljs-attr">position</span>: <span class="hljs-string">&#39;bottom-left&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">const</span> open4 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;自定义位置&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;左上角弹出的消息&#39;</span>,\n        <span class="hljs-attr">position</span>: <span class="hljs-string">&#39;top-left&#39;</span>,\n      })\n    }\n\n    <span class="hljs-keyword">return</span> {\n      open1,\n      open2,\n      open3,\n      open4,\n    }\n  },\n}\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),Y=p("h2",{id:"带有偏移","data-source-line":"195"},[p("a",{class:"markdownIt-Anchor",href:"#带有偏移"},"#"),r(" 带有偏移")],-1),Z=p("p",{"data-source-line":"197"},[r("Notification 提供设置偏移量的功能，通过设置 "),p("code",null,"offset"),r(" 字段，可以使弹出的消息距屏幕边缘偏移一段距离。注意在同一时刻，所有的 Notification 实例应当具有一个相同的偏移量。")],-1),ss=p("pre",{style:{display:"none"}},null,-1),ns={class:"vuedoc-demo "},as={class:"vuedoc-demo__inner"},ts={class:"vuedoc-demo__preview"},ls={ref:"vdpv_3Ref",class:"vuedoc-demo__sourceref"},es=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open1&quot;</span>&gt;</span>\n    偏移的消息\n  <span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">const</span> open1 = <span class="hljs-function">() =&gt;</span> {\n      globalFuncs.$notify({\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;偏移&#39;</span>,\n        <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;这是一条带有偏移的提示消息&#39;</span>,\n        <span class="hljs-attr">offset</span>: <span class="hljs-number">100</span>,\n      })\n    }\n\n    <span class="hljs-keyword">return</span> {\n      open1,\n    }\n  },\n}\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),ps=u('<h2 id="全局方法" data-source-line="229"><a class="markdownIt-Anchor" href="#全局方法">#</a> 全局方法</h2><p data-source-line="231">Rol-ui 为 <code>app.config.globalProperties</code> 添加了全局方法 <code>$notify</code>。因此在 vue instance 中可以采用本页面中的方式调用 Notification。</p><h3 id="单独引用" data-source-line="233"><a class="markdownIt-Anchor" href="#单独引用">#</a> 单独引用</h3><pre style="display:none;"></pre><pre class="hljs vuedoc__hljs language-javascript hljs--one-dark"><code><span class="hljs-keyword">import</span> { RolNotifyWrap } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;rol-ui&#39;</span>\n</code></pre><p data-source-line="239">此时调用方法为 <code>RolNotifyWrap(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>RolNotifyWrap.success(options)</code>。并且可以调用 <code>RolNotifyWrap.closeAll()</code> 手动关闭所有实例。</p><h3 id="options" data-source-line="241"><a class="markdownIt-Anchor" href="#options">#</a> Options</h3><table data-source-line="243"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>title</td><td>标题</td><td>string</td><td>—</td><td>—</td></tr><tr><td>message</td><td>说明文字</td><td>string/Vue.VNode</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>是否将 message 属性作为 HTML 片段处理</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>type</td><td>主题样式，如果不在可选值内将被忽略</td><td>string</td><td>success/warning/info/error</td><td>—</td></tr><tr><td>iconClass</td><td>自定义图标的类名。若设置了 <code>type</code>，则 <code>iconClass</code> 会被覆盖</td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>duration</td><td>显示时间, 毫秒。设为 0 则不会自动关闭</td><td>number</td><td>—</td><td>4500</td></tr><tr><td>position</td><td>自定义弹出位置</td><td>string</td><td>top-right/top-left/bottom-right/bottom-left</td><td>top-right</td></tr><tr><td>showClose</td><td>是否显示关闭按钮</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>onClose</td><td>关闭时的回调函数</td><td>function</td><td>—</td><td>—</td></tr><tr><td>onClick</td><td>点击 Notification 时的回调函数</td><td>function</td><td>—</td><td>—</td></tr><tr><td>offset</td><td>偏移的距离，在同一时刻，所有的 Notification 实例应当具有一个相同的偏移量</td><td>number</td><td>—</td><td>0</td></tr></tbody></table><h3 id="方法" data-source-line="258"><a class="markdownIt-Anchor" href="#方法">#</a> 方法</h3><p data-source-line="260">调用 <code>RolNotifyWrap</code> 或 <code>this.$notify</code> 会返回当前 Notification 的实例。如果需要手动关闭实例，可以调用它的 <code>close</code> 方法。</p><table data-source-line="261"><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>close</td><td>关闭当前的 Notification</td></tr></tbody></table>',11);R.render=function(s,n,a,o,c,r){const d=t("vdpv_0"),i=t("vdpv_1"),h=t("vdpv_2"),g=t("vdpv_3");return l(),e("div",A,[P,p("div",W,[p("div",O,[p("div",L,[p(d)]),p("div",{style:{height:s.vdpv_0Height},class:"vuedoc-demo__source"},[p("div",M,[T],512)],4),p("div",{class:"vuedoc-demo__footer",onClick:n[1]||(n[1]=n=>s.toggleCode(0))},j(s.vdpv_0Height>0?"hidden":"show"),1)])]),V,p("div",S,[p("div",U,[p("div",z,[p(i)]),p("div",{style:{height:s.vdpv_1Height},class:"vuedoc-demo__source"},[p("div",B,[D],512)],4),p("div",{class:"vuedoc-demo__footer",onClick:n[2]||(n[2]=n=>s.toggleCode(1))},j(s.vdpv_1Height>0?"hidden":"show"),1)])]),E,p("div",G,[p("div",J,[p("div",K,[p(h)]),p("div",{style:{height:s.vdpv_2Height},class:"vuedoc-demo__source"},[p("div",Q,[X],512)],4),p("div",{class:"vuedoc-demo__footer",onClick:n[3]||(n[3]=n=>s.toggleCode(2))},j(s.vdpv_2Height>0?"hidden":"show"),1)])]),Y,Z,ss,p("div",ns,[p("div",as,[p("div",ts,[p(g)]),p("div",{style:{height:s.vdpv_3Height},class:"vuedoc-demo__source"},[p("div",ls,[es],512)],4),p("div",{class:"vuedoc-demo__footer",onClick:n[4]||(n[4]=n=>s.toggleCode(3))},j(s.vdpv_3Height>0?"hidden":"show"),1)])]),ps])};export default R;
