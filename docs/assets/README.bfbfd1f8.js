var s=Object.assign;import{f as a,m as n,r as t,o as e,c as l,w as o,b as p,u as c,g as d,h as r,t as i,a as h,i as g,j as u}from"./index.b6e0c42c.js";const j=a({setup(){const s=n().appContext.config.globalProperties;return{open(){s.$alert("这是一段内容","标题名称",{confirmButtonText:"确定",callback:a=>{s.$message({type:"info",message:`action: ${a}`})}})}}}}),m=p("点击打开 Message Box");j.render=function(s,a,n,p,c,d){const r=t("rol-button");return e(),l(r,{type:"text",onClick:s.open},{default:o((()=>[m])),_:1},8,["onClick"])};const v=a({setup(){const s=n().appContext.config.globalProperties;return{open(){s.$confirm("此操作将永久删除该文件, 是否继续?","提示",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning"}).then((()=>{s.$message({type:"success",message:"删除成功!"})})).catch((()=>{s.$message({type:"info",message:"已取消删除"})}))}}}}),f=p("点击打开 Message Box");v.render=function(s,a,n,p,c,d){const r=t("rol-button");return e(),l(r,{type:"text",onClick:s.open},{default:o((()=>[f])),_:1},8,["onClick"])};const x=a({setup(){const s=n().appContext.config.globalProperties;return{open(){s.$prompt("请输入邮箱","提示",{confirmButtonText:"确定",cancelButtonText:"取消",inputPattern:/[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/,inputErrorMessage:"邮箱格式不正确"}).then((({value:a})=>{s.$message({type:"success",message:"你的邮箱是: "+a})})).catch((()=>{s.$message({type:"info",message:"取消输入"})}))}}}}),_=p("点击打开 Message Box");x.render=function(s,a,n,p,c,d){const r=t("rol-button");return e(),l(r,{type:"text",onClick:s.open},{default:o((()=>[_])),_:1},8,["onClick"])};const b=a({setup(){const s=n().appContext.config.globalProperties;return{open(){s.$msgbox({title:"消息",message:c("p",null,[c("span",null,"内容可以是 "),c("i",{style:"color: teal"},"VNode")]),showCancelButton:!0,confirmButtonText:"确定",cancelButtonText:"取消",beforeClose:(s,a,n)=>{"confirm"===s?(a.confirmButtonLoading=!0,a.confirmButtonText="执行中...",setTimeout((()=>{n(),setTimeout((()=>{a.confirmButtonLoading=!1}),300)}),3e3)):n()}}).then((a=>{s.$message({type:"info",message:"action: "+a})}))}}}}),w=p("点击打开 Message Box");b.render=function(s,a,n,p,c,d){const r=t("rol-button");return e(),l(r,{type:"text",onClick:s.open},{default:o((()=>[w])),_:1},8,["onClick"])};const y=a({components:{vdpv_0:j,vdpv_1:v,vdpv_2:x,vdpv_3:b},setup(a){const n=d(),t=d(),e=d(),l=d(),o=[n,t,e,l],p=r({vdpv_0Height:"0px",vdpv_1Height:"0px",vdpv_2Height:"0px",vdpv_3Height:"0px"});return s(s({toggleCode:s=>{const a="vdpv_"+s;"0px"===p[a+"Height"]?p[a+"Height"]=((o[s].value?o[s].value.offsetHeight:0)||0)+"px":p[a+"Height"]="0px"}},i(p)),{vdpv_0Ref:n,vdpv_1Ref:t,vdpv_2Ref:e,vdpv_3Ref:l})}});y.$vd={matter:{title:"MessageBox",description:"MessageBox component doc",wrapperClass:"messageBox-demo-wrapper",tags:["components","feedback"]},toc:[{content:"MessageBox 弹框",anchor:"messagebox-弹框",level:1},{content:"消息提示",anchor:"消息提示",level:2},{content:"确认消息",anchor:"确认消息",level:2},{content:"提交内容",anchor:"提交内容",level:2},{content:"自定义",anchor:"自定义",level:2},{content:"全局方法",anchor:"全局方法",level:2},{content:"单独引用",anchor:"单独引用",level:3},{content:"Options",anchor:"options",level:3}]};const B=y,C={class:"vuedoc  messageBox-demo-wrapper"},k=u('<h1 id="messagebox-弹框" data-source-line="2"><a class="markdownIt-Anchor" href="#messagebox-弹框">#</a> MessageBox 弹框</h1><p data-source-line="4">模拟系统的消息提示框而实现的一套模态对话框组件，用于消息提示、确认消息和提交内容。</p><h2 id="消息提示" data-source-line="6"><a class="markdownIt-Anchor" href="#消息提示">#</a> 消息提示</h2><p data-source-line="8">调用<code>$alert</code>方法即可打开消息提示，它模拟了系统的 <code>alert</code>，无法通过按下 ESC 或点击框外关闭。此例中接收了两个参数，<code>message</code>和<code>title</code>。值得一提的是，窗口被关闭后，它默认会返回一个<code>Promise</code>对象便于进行后续操作的处理。若不确定浏览器是否支持<code>Promise</code>，可自行引入第三方 polyfill 或像本例一样使用回调进行后续处理。</p><pre style="display:none;"></pre>',5),$={class:"vuedoc-demo "},M={class:"vuedoc-demo__inner"},T={class:"vuedoc-demo__preview"},I={ref:"vdpv_0Ref",class:"vuedoc-demo__sourceref"},P=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open&quot;</span>&gt;</span>点击打开 Message Box<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n     <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs.$alert(<span class="hljs-string">&#39;这是一段内容&#39;</span>, <span class="hljs-string">&#39;标题名称&#39;</span>, {\n          <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#39;确定&#39;</span>,\n          <span class="hljs-attr">callback</span>: <span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> {\n            globalFuncs.$message({\n              <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;info&#39;</span>,\n              <span class="hljs-attr">message</span>: <span class="hljs-string">`action: <span class="hljs-subst">${action}</span>`</span>,\n            })\n          },\n        })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),H=u('<h2 id="确认消息" data-source-line="39"><a class="markdownIt-Anchor" href="#确认消息">#</a> 确认消息</h2><p data-source-line="41">调用<code>$confirm</code>方法即可打开消息提示，它模拟了系统的 <code>confirm</code>。Message Box 组件也拥有极高的定制性，我们可以传入<code>options</code>作为第三个参数，它是一个字面量对象。<code>type</code>字段表明消息类型，可以为<code>success</code>，<code>error</code>，<code>info</code>和<code>warning</code>，无效的设置将会被忽略。注意，第二个参数<code>title</code>必须定义为<code>String</code>类型，如果是<code>Object</code>，会被理解为<code>options</code>。在这里我们用了 Promise 来处理后续响应。</p><pre style="display:none;"></pre>',3),q={class:"vuedoc-demo "},F={class:"vuedoc-demo__inner"},R={class:"vuedoc-demo__preview"},A={ref:"vdpv_1Ref",class:"vuedoc-demo__sourceref"},E=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open&quot;</span>&gt;</span>点击打开 Message Box<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs\n          .$confirm(<span class="hljs-string">&#39;此操作将永久删除该文件, 是否继续?&#39;</span>, <span class="hljs-string">&#39;提示&#39;</span>, {\n            <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#39;确定&#39;</span>,\n            <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#39;取消&#39;</span>,\n            <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;warning&#39;</span>,\n          })\n          .then(<span class="hljs-function">() =&gt;</span> {\n            globalFuncs.$message({\n              <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;success&#39;</span>,\n              <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;删除成功!&#39;</span>,\n            })\n          })\n          .catch(<span class="hljs-function">() =&gt;</span> {\n            globalFuncs.$message({\n              <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;info&#39;</span>,\n              <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;已取消删除&#39;</span>,\n            })\n          })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),O=u('<h2 id="提交内容" data-source-line="81"><a class="markdownIt-Anchor" href="#提交内容">#</a> 提交内容</h2><p data-source-line="83">调用<code>$prompt</code>方法即可打开消息提示，它模拟了系统的 <code>prompt</code>。可以用<code>inputPattern</code>字段自己规定匹配模式，或者用<code>inputValidator</code>规定校验函数，可以返回<code>Boolean</code>或<code>String</code>，返回<code>false</code>或字符串时均表示校验未通过，同时返回的字符串相当于定义了<code>inputErrorMessage</code>字段。此外，可以用<code>inputPlaceholder</code>字段来定义输入框的占位符。</p><pre style="display:none;"></pre>',3),S={class:"vuedoc-demo "},V={class:"vuedoc-demo__inner"},L={class:"vuedoc-demo__preview"},W={ref:"vdpv_2Ref",class:"vuedoc-demo__sourceref"},N=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open&quot;</span>&gt;</span>点击打开 Message Box<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs\n          .$prompt(<span class="hljs-string">&#39;请输入邮箱&#39;</span>, <span class="hljs-string">&#39;提示&#39;</span>, {\n            <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#39;确定&#39;</span>,\n            <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#39;取消&#39;</span>,\n            <span class="hljs-attr">inputPattern</span>: <span class="hljs-regexp">/[\\w!#$%&amp;&#39;*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&amp;&#39;*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/</span>,\n            inputErrorMessage: <span class="hljs-string">&#39;邮箱格式不正确&#39;</span>,\n          })\n          .then(<span class="hljs-function">(<span class="hljs-params">{ value }</span>) =&gt;</span> {\n            globalFuncs.$message({\n              <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;success&#39;</span>,\n              <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;你的邮箱是: &#39;</span> + value,\n            })\n          })\n          .catch(<span class="hljs-function">() =&gt;</span> {\n            globalFuncs.$message({\n              <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;info&#39;</span>,\n              <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;取消输入&#39;</span>,\n            })\n          })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),U=u('<h2 id="自定义" data-source-line="124"><a class="markdownIt-Anchor" href="#自定义">#</a> 自定义</h2><p data-source-line="126">以上三个方法都是对<code>$msgbox</code>方法的再包装。本例直接调用<code>$msgbox</code>方法，使用了<code>showCancelButton</code>字段，用于显示取消按钮。另外可使用<code>cancelButtonClass</code>为其添加自定义样式，使用<code>cancelButtonText</code>来自定义按钮文本（Confirm 按钮也具有相同的字段，在文末的字段说明中有完整的字段列表）。此例还使用了<code>beforeClose</code>属性，它的值是一个方法，会在 MessageBox 的实例关闭前被调用，同时暂停实例的关闭。它有三个参数：<code>action</code>、实例本身和<code>done</code>方法。使用它能够在关闭前对实例进行一些操作，比如为确定按钮添加<code>loading</code>状态等；此时若需要关闭实例，可以调用<code>done</code>方法（若在<code>beforeClose</code>中没有调用<code>done</code>，则实例不会关闭）。</p><pre style="display:none;"></pre>',3),z={class:"vuedoc-demo "},D={class:"vuedoc-demo__inner"},G={class:"vuedoc-demo__preview"},J={ref:"vdpv_3Ref",class:"vuedoc-demo__sourceref"},K=u('<div class="vuedoc__code "><pre class="hljs vuedoc__hljs language-vue hljs--one-dark"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">rol-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;open&quot;</span>&gt;</span>点击打开 Message Box<span class="hljs-tag">&lt;/<span class="hljs-name">rol-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="javascript">\n<span class="hljs-keyword">import</span> { defineComponent, h, getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent({\n  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> globalFuncs = getCurrentInstance().appContext.config.globalProperties\n\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> {\n        globalFuncs\n          .$msgbox({\n            <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;消息&#39;</span>,\n            <span class="hljs-attr">message</span>: h(<span class="hljs-string">&#39;p&#39;</span>, <span class="hljs-literal">null</span>, [h(<span class="hljs-string">&#39;span&#39;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#39;内容可以是 &#39;</span>), h(<span class="hljs-string">&#39;i&#39;</span>, { <span class="hljs-attr">style</span>: <span class="hljs-string">&#39;color: teal&#39;</span> }, <span class="hljs-string">&#39;VNode&#39;</span>)]),\n            <span class="hljs-attr">showCancelButton</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#39;确定&#39;</span>,\n            <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#39;取消&#39;</span>,\n            <span class="hljs-attr">beforeClose</span>: <span class="hljs-function">(<span class="hljs-params">action, msgInstance, done</span>) =&gt;</span> {\n              <span class="hljs-keyword">if</span> (action === <span class="hljs-string">&#39;confirm&#39;</span>) {\n                msgInstance.confirmButtonLoading = <span class="hljs-literal">true</span>\n                msgInstance.confirmButtonText = <span class="hljs-string">&#39;执行中...&#39;</span>\n                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n                  done()\n                  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n                    msgInstance.confirmButtonLoading = <span class="hljs-literal">false</span>\n                  }, <span class="hljs-number">300</span>)\n                }, <span class="hljs-number">3000</span>)\n              } <span class="hljs-keyword">else</span> {\n                done()\n              }\n            },\n          })\n          .then(<span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> {\n            globalFuncs.$message({\n              <span class="hljs-attr">type</span>: <span class="hljs-string">&#39;info&#39;</span>,\n              <span class="hljs-attr">message</span>: <span class="hljs-string">&#39;action: &#39;</span> + action,\n            })\n          })\n      },\n    }\n  },\n})\n</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</span></code></pre></div>',1),Q=u('<h2 id="全局方法" data-source-line="176"><a class="markdownIt-Anchor" href="#全局方法">#</a> 全局方法</h2><p data-source-line="178">如果你完整引入了 rol-ui <code>app.config.globalProperties</code> 添加如下全局方法：$msgbox, $alert, $confirm 和 $prompt。因此在 Vue instance 中可以采用本页面中的方式调用 <code>MessageBox</code>。调用参数为：</p><ul data-source-line="180"><li><code>$msgbox(options)</code></li><li><code>$alert(message, title, options)</code> 或 <code>$alert(message, options)</code></li><li><code>$confirm(message, title, options)</code> 或 <code>$confirm(message, options)</code></li><li><code>$prompt(message, title, options)</code> 或 <code>$prompt(message, options)</code></li></ul><h3 id="单独引用" data-source-line="185"><a class="markdownIt-Anchor" href="#单独引用">#</a> 单独引用</h3><p data-source-line="187">如果单独引入 <code>MessageBox</code>：</p><pre style="display:none;"></pre><pre class="hljs vuedoc__hljs language-javascript hljs--one-dark"><code><span class="hljs-keyword">import</span> { RolMessageBoxWrap } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;rol-ui&#39;</span>\n</code></pre><p data-source-line="193">那么对应于上述四个全局方法的调用方法依次为：RolMessageBoxWrap, RolMessageBoxWrap.alert, RolMessageBoxWrap.confirm 和 RolMessageBoxWrap.prompt，调用参数与全局方法相同。</p><h3 id="options" data-source-line="195"><a class="markdownIt-Anchor" href="#options">#</a> Options</h3><table data-source-line="197"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>title</td><td>MessageBox 标题</td><td>string</td><td>—</td><td>—</td></tr><tr><td>message</td><td>MessageBox 消息正文内容</td><td>string / VNode</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>是否将 message 属性作为 HTML 片段处理</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>type</td><td>消息类型，用于显示图标</td><td>string</td><td>success / info / warning / error</td><td>—</td></tr><tr><td>iconClass</td><td>自定义图标的类名，会覆盖 <code>type</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>MessageBox 的自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>callback</td><td>若不使用 Promise，可以使用此参数指定 MessageBox 关闭后的回调</td><td>function(action, instance)，action 的值为’confirm’, ‘cancel’或’close’, instance 为 MessageBox 实例，可以通过它访问实例上的属性和方法</td><td>—</td><td>—</td></tr><tr><td>showClose</td><td>MessageBox 是否显示右上角关闭按钮</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>beforeClose</td><td>MessageBox 关闭前的回调，会暂停实例的关闭</td><td>function(action, instance, done)，action 的值为’confirm’, ‘cancel’或’close’；instance 为 MessageBox 实例，可以通过它访问实例上的属性和方法；done 用于关闭 MessageBox 实例</td><td>—</td><td>—</td></tr><tr><td>distinguishCancelAndClose</td><td>是否将取消（点击取消按钮）与关闭（点击关闭按钮或遮罩层、按下 ESC 键）进行区分</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>lockScroll</td><td>是否在 MessageBox 出现时将 body 滚动锁定</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showCancelButton</td><td>是否显示取消按钮</td><td>boolean</td><td>—</td><td>false（以 confirm 和 prompt 方式调用时为 true）</td></tr><tr><td>showConfirmButton</td><td>是否显示确定按钮</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>cancelButtonText</td><td>取消按钮的文本内容</td><td>string</td><td>—</td><td>取消</td></tr><tr><td>confirmButtonText</td><td>确定按钮的文本内容</td><td>string</td><td>—</td><td>确定</td></tr><tr><td>cancelButtonClass</td><td>取消按钮的自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>confirmButtonClass</td><td>确定按钮的自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>closeOnClickModal</td><td>是否可通过点击遮罩关闭 MessageBox</td><td>boolean</td><td>—</td><td>true（以 alert 方式调用时为 false）</td></tr><tr><td>closeOnPressEscape</td><td>是否可通过按下 ESC 键关闭 MessageBox</td><td>boolean</td><td>—</td><td>true（以 alert 方式调用时为 false）</td></tr><tr><td>closeOnHashChange</td><td>是否在 hashchange 时关闭 MessageBox</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showInput</td><td>是否显示输入框</td><td>boolean</td><td>—</td><td>false（以 prompt 方式调用时为 true）</td></tr><tr><td>inputPlaceholder</td><td>输入框的占位符</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputType</td><td>输入框的类型</td><td>string</td><td>—</td><td>text</td></tr><tr><td>inputValue</td><td>输入框的初始文本</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputPattern</td><td>输入框的校验表达式</td><td>regexp</td><td>—</td><td>—</td></tr><tr><td>inputValidator</td><td>输入框的校验函数。可以返回布尔值或字符串，若返回一个字符串, 则返回结果会被赋值给 inputErrorMessage</td><td>function</td><td>—</td><td>—</td></tr><tr><td>inputErrorMessage</td><td>校验未通过时的提示文本</td><td>string</td><td>—</td><td>输入的数据不合法!</td></tr><tr><td>center</td><td>是否居中布局</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>roundButton</td><td>是否使用圆角按钮</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table>',10);B.render=function(s,a,n,o,p,c){const d=t("vdpv_0"),r=t("vdpv_1"),i=t("vdpv_2"),u=t("vdpv_3");return e(),l("div",C,[k,h("div",$,[h("div",M,[h("div",T,[h(d)]),h("div",{style:{height:s.vdpv_0Height},class:"vuedoc-demo__source"},[h("div",I,[P],512)],4),h("div",{class:"vuedoc-demo__footer",onClick:a[1]||(a[1]=a=>s.toggleCode(0))},g(s.vdpv_0Height>0?"hidden":"show"),1)])]),H,h("div",q,[h("div",F,[h("div",R,[h(r)]),h("div",{style:{height:s.vdpv_1Height},class:"vuedoc-demo__source"},[h("div",A,[E],512)],4),h("div",{class:"vuedoc-demo__footer",onClick:a[2]||(a[2]=a=>s.toggleCode(1))},g(s.vdpv_1Height>0?"hidden":"show"),1)])]),O,h("div",S,[h("div",V,[h("div",L,[h(i)]),h("div",{style:{height:s.vdpv_2Height},class:"vuedoc-demo__source"},[h("div",W,[N],512)],4),h("div",{class:"vuedoc-demo__footer",onClick:a[3]||(a[3]=a=>s.toggleCode(2))},g(s.vdpv_2Height>0?"hidden":"show"),1)])]),U,h("div",z,[h("div",D,[h("div",G,[h(u)]),h("div",{style:{height:s.vdpv_3Height},class:"vuedoc-demo__source"},[h("div",J,[K],512)],4),h("div",{class:"vuedoc-demo__footer",onClick:a[4]||(a[4]=a=>s.toggleCode(3))},g(s.vdpv_3Height>0?"hidden":"show"),1)])]),Q])};export default B;
